# Telegraf Configuration

# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "10s"
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most metric_batch_size metrics.
  metric_batch_size = 1000

  ## Maximum number of unwritten metrics per output.
  metric_buffer_limit = 1000

  ## Collection jitter is used to jitter the collection by a random amount.
  collection_jitter = "0s"

  ## Default flushing interval for all outputs.
  flush_interval = "10s"
  flush_jitter = "0s"

  ## Collected metrics are rounded to the precision specified.
  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval, with the maximum being 1s.
  precision = "0s"

  ## Log at debug level.
  # debug = false
  ## Log only error level messages.
  # quiet = false


# The main data flow configuration

[[inputs.mqtt_consumer]]
  servers = ["tcp://127.0.0.1:1883"]
  username = ""
  password = ""
  topics = [
    "huisautomatie/meterkast/stroom/levering",
    "huisautomatie/meterkast/stroom/teruglevering",
    "huisautomatie/meterkast/stroom/geleverd/laagtarief",
    "huisautomatie/meterkast/stroom/geleverd/hoogtarief",
    "huisautomatie/meterkast/stroom/teruggeleverd/laagtarief",
    "huisautomatie/meterkast/stroom/teruggeleverd/hoogtarief",
    "huisautomatie/meterkast/stroom/tarief",
    "huisautomatie/meterkast/gas/geleverd"
  ]
  data_format = "value"
  data_type = "string"
  client_id = "telegraf_mqtt_client"
  name_override = "mqtt_measurement"

  ## Tag topic names to distinguish them in the processor
  topic_tag = "topic"


# Stripping braces and units
[[processors.starlark]]
  namepass = ["mqtt_measurement"]
  tagpass = { topic = [
      "huisautomatie/meterkast/stroom/levering",
      "huisautomatie/meterkast/stroom/teruglevering",
      "huisautomatie/meterkast/stroom/geleverd/laagtarief",
      "huisautomatie/meterkast/stroom/geleverd/hoogtarief",
      "huisautomatie/meterkast/stroom/teruggeleverd/laagtarief",
      "huisautomatie/meterkast/stroom/teruggeleverd/hoogtarief",
      "huisautomatie/meterkast/stroom/tarief"
  ] }
  source = """
def apply(metric):
  for field_name, value in metric.fields.items():
    if type(value) == 'string':
      value = value.lstrip('(').rstrip(')*kWhA')
      metric.fields[field_name] = float(value)
  return metric
"""


# Processor specifically for gas
[[processors.starlark]]
  namepass = ["mqtt_measurement"]
  tagpass = { topic = ["huisautomatie/meterkast/gas/geleverd"] }
  source = """
load('time.star', 'time')
def apply(metric):
  for field_name, value in metric.fields.items():
    if type(value) == 'string':
      datetime, value = value.split(')(')
      datetime = time.parse_time(datetime[1:-1], format='060102150405', location='Europe/Amsterdam')
      metric.time = datetime.unix_nano
      metric.fields[field_name] = float(value[:-4])
  return metric
"""


[[outputs.influxdb]]
  urls = ["http://127.0.0.1:8086"]
  database = "huisautomatie"
  username = ""
  password = ""


